/*----------------------------------------------------------------------------
----------------------------------------- Area de Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones, Paquetes
package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;


//-------------------> Codigo para el parser, variables, metodos
parser code
{:      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}

:}


//-------------------> Codigo para las acciones gramaticales
action code
{:
:}  


/*----------------------------------------------------------------------------
----------------------------------------- Area de Declaraciones
----------------------------------------------------------------------------*/

//-------------------> Declaración de Terminales
terminal inicio,fin,usuarioi,usuariof,idi,idf,codigoi,codigof,creari,crearf,nombrei,nombref,apellidoi,apellidof,telefonoi,telefonof,correoi,correof,direccioni,direccionf;
terminal tipoT,codi,codf,propii,propif,imgi,imgf,cod,pro,nom,dir,tel,tip,productot;
terminal cantidadi,cantidadf,marcai,marcaf,colori,colorf,tamanoi,tamanof,sucursali,sucursalf,productof,sucur;
terminal cant,tiend,tiendaf,llavei,llavef,pcoma,apar,cpar,mas,menos,por,div,igual,coma;
terminal String rdecimal,rentero,tstring,tchar,id,idc;



//-------------------> Declaración de No Terminales
non terminal Nodo INICIO;
non terminal Nodo CUERPO,OPCIONES;
non terminal Nodo LOGIN,BLOQUE,SENTENCIAS,SENTENCIA,ID,PASSWORD;
non terminal Nodo REGISTRO,BLOQUER,SENTENCIASR,SENTENCIAR,IDR,NOMBRER,APELLIDOR,PASSWORDR,TELEFONOR,EMAILR,DIRECCIONR;
non terminal Nodo REGISTROT,BLOQUET,SENTENCIAST,SENTENCIAT,CODIGOT,PROPIETARIOT,NOMBRET,DIRECCIONT,TELEFONOT,IMGT;
non terminal Nodo MODIFICACIONA,BLOQUEA,SENTENCIASA,SENTENCIAA,TIPOA,CODIGOA,PROPIETARIOA,NOMBREA,DIRECCIONA,TELEFONOA,BLOQUEA1;
non terminal Nodo ELIMINAR,BLOQUEE,BLOQUEE1,SENTENCIASE,SENTENCIAE,CODIGOE,PROPIETARIOE,TIPOE;
 


//-------------------> Precedencia y Asociatividad
//precedence left mas, menos;
//precedence left por,div;


//-------------------> No Terminal inicial
start with INICIO;



/*----------------------------------------------------------------------------
----------------------------------------- Area de Gramatica
----------------------------------------------------------------------------*/
INICIO::= CUERPO:raiz
        {:
           parser.raiz=raiz;
        :}
    | error INICIO
    | ;


////----------------login --------

CUERPO::=CUERPO:lista OPCIONES:sentencia
{:
 lista.hijos.add(sentencia);
            RESULT = lista;
:}
    |OPCIONES:sentencia
{:
            Nodo lista = new Nodo("Opciones", sentenciaright, sentencialeft);
            lista.hijos.add(sentencia);
            RESULT = lista;
:};

OPCIONES::=LOGIN:a
{:
RESULT=a;
:}
    |REGISTRO:a
{:
RESULT=a;
:}
    |REGISTROT:a
{:
RESULT=a;
:}
    |MODIFICACIONA:a
{:
RESULT=a;
:};

LOGIN::= inicio BLOQUE fin;

BLOQUE::= usuarioi SENTENCIAS usuariof;

SENTENCIAS::=SENTENCIAS SENTENCIA
    |SENTENCIA;

SENTENCIA::=ID
    |PASSWORD;


ID::=idi rentero idf;

PASSWORD::=codigoi id codigof;


//////---------------Registro usuario-------------

REGISTRO::= inicio BLOQUER fin;

BLOQUER::= creari SENTENCIASR crearf;

SENTENCIASR::=SENTENCIASR SENTENCIAR
    |SENTENCIAR;

SENTENCIAR::=IDR
    |NOMBRER
    |APELLIDOR
    |PASSWORDR
    |TELEFONOR
    |EMAILR
    |DIRECCIONR;

IDR::=idi rentero idf;

NOMBRER::=nombrei tstring nombref;

APELLIDOR::=apellidoi tstring apellidof;

PASSWORDR::=codigoi id codigof;

TELEFONOR::=telefonoi rentero telefonof;

EMAILR::= correoi idc correof;

DIRECCIONR::=direccioni tstring direccionf;

//////---------registrotienda----------------

REGISTROT::= inicio BLOQUET fin;

BLOQUET::=llavei tipoT tip igual tstring llavei SENTENCIAST tiendaf;

SENTENCIAST::=SENTENCIAST SENTENCIAT
    |SENTENCIAT;

SENTENCIAT::=CODIGOT
    |PROPIETARIOT
    |NOMBRET
    |DIRECCIONT
    |TELEFONOT
    |IMGT;


CODIGOT::=codi rentero codf;

PROPIETARIOT::=propii rentero propif;

NOMBRET::=nombrei tstring nombref;

DIRECCIONT::=direccioni tstring direccionf;

TELEFONOT::=telefonoi rentero telefonof;

IMGT::=imgi tstring imgf;

////------modificacion de atributos

MODIFICACIONA::=inicio:a BLOQUEA:b fin
{:
Nodo cuerpo = new Nodo("Modificacion", aright, aleft);
cuerpo.hijos.add(b);
RESULT = cuerpo;

:};

BLOQUEA::=BLOQUEA:a BLOQUEA1:b
{:
 a.hijos.add(b);
 RESULT = a;

:}
    |BLOQUEA1:a
{:
Nodo lista = new Nodo("Bloque", aright, aleft);
            lista.hijos.add(a);
            RESULT = lista;
:};

BLOQUEA1::= llavei tipoT:a SENTENCIASA:b llavef
{:
Nodo cuerpo = new Nodo("Tienda", aright, aleft);
cuerpo.hijos.add(b);
RESULT = cuerpo;
:};


SENTENCIASA::=SENTENCIASA:a coma SENTENCIAA:b
{:
 a.hijos.add(b);
 RESULT = a;

:}
    |SENTENCIAA:a
{:
Nodo lista = new Nodo("Bloque", aright, aleft);
lista.hijos.add(a);
RESULT = lista;

:};

SENTENCIAA::=TIPOA:a
{:
RESULT=a;
:}
    |CODIGOA:a
{:
RESULT=a;

:}
    |PROPIETARIOA:a{:
RESULT=a;

:}
    |NOMBREA:a{:

RESULT=a;

:}
    |DIRECCIONA:a{:
RESULT=a;

:}
    |TELEFONOA:a
{:
RESULT=a;
:};

TIPOA::=tip igual tstring:a
{:
 Nodo padre = new Nodo("Tipo", aleft, aright);
            Nodo hijo_1 = new Nodo(a.replaceAll("\"","").toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;
:};

CODIGOA::=cod igual rentero:a
{:
  Nodo padre = new Nodo("Codigo", aleft, aright);
            Nodo hijo_1 = new Nodo(a.toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;

:};

PROPIETARIOA::=pro igual rentero:a
{:
 Nodo padre = new Nodo("propietario", aleft, aright);
            Nodo hijo_1 = new Nodo(a.toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;

:};

NOMBREA::=nom igual tstring:a{:
Nodo padre = new Nodo("Nombre", aleft, aright);
            Nodo hijo_1 = new Nodo(a.replaceAll("\"","").toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;
:};

DIRECCIONA::=dir igual tstring:a
{:

Nodo padre = new Nodo("Direccion", aleft, aright);
            Nodo hijo_1 = new Nodo(a.replaceAll("\"","").toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;

:};

TELEFONOA::=tel igual rentero:a
{:

Nodo padre = new Nodo("Telefono", aleft, aright);
            Nodo hijo_1 = new Nodo(a.toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;
:};

///----------------ELIMINAR TIENDA-----------

/*
ELIMINAR::=inicio:a BLOQUEE:b fin{:
 Nodo cuerpo = new Nodo("Eliminar", aright, aleft);
            cuerpo.hijos.add(b);
            RESULT = cuerpo;

:};

BLOQUEE::=BLOQUEE:a BLOQUEE1:b{:
a.hijos.add(b);
            RESULT = a;
:}
    |BLOQUEE1:a{:
 Nodo lista = new Nodo("Bloque",aright,aleft);
            lista.hijos.add(a);
            RESULT = lista;
:};

BLOQUEE1::=llavei tipoT SENTENCIASA llavef;

*/













