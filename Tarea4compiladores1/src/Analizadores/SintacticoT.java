
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 14 23:54:42 CST 2016
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 14 23:54:42 CST 2016
  */
public class SintacticoT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoT() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\006\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\012\005\000\002\013\005" +
    "\000\002\014\005\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\005\000\002\020\005\000\002\021\005" +
    "\000\002\022\005\000\002\023\005\000\002\024\005\000" +
    "\002\025\005\000\002\026\005\000\002\027\012\000\002" +
    "\030\004\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\005\000\002\033\005\000" +
    "\002\034\005\000\002\035\005\000\002\036\005\000\002" +
    "\037\005\000\002\040\005\000\002\041\004\000\002\041" +
    "\003\000\002\052\006\000\002\042\005\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\005\000\002\045\005\000\002\046\005\000\002\047" +
    "\005\000\002\050\005\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\ufffe\003\012\004\006\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\004\002\210\001\002" +
    "\000\010\006\021\014\024\065\025\001\002\000\006\002" +
    "\ufffb\004\ufffb\001\002\000\006\002\000\004\006\001\002" +
    "\000\006\002\ufff9\004\ufff9\001\002\000\010\002\ufffe\003" +
    "\012\004\006\001\002\000\006\002\ufffa\004\ufffa\001\002" +
    "\000\006\002\ufff8\004\ufff8\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\ufffd\004\ufffd\001\002\000\004\005\207" +
    "\001\002\000\004\005\206\001\002\000\006\010\174\012" +
    "\175\001\002\000\006\005\uffcb\065\uffcb\001\002\000\004" +
    "\005\171\001\002\000\020\010\135\012\147\016\144\020" +
    "\140\022\141\024\150\026\142\001\002\000\004\030\070" +
    "\001\002\000\006\005\031\065\030\001\002\000\006\005" +
    "\uffcc\065\uffcc\001\002\000\004\030\032\001\002\000\006" +
    "\002\uffcd\004\uffcd\001\002\000\016\037\041\040\046\041" +
    "\040\042\036\043\037\044\045\001\002\000\006\066\uffc3" +
    "\077\uffc3\001\002\000\006\066\066\077\065\001\002\000" +
    "\006\066\uffc2\077\uffc2\001\002\000\004\076\063\001\002" +
    "\000\004\076\061\001\002\000\004\076\057\001\002\000" +
    "\004\076\055\001\002\000\006\066\uffc4\077\uffc4\001\002" +
    "\000\006\066\uffc6\077\uffc6\001\002\000\006\066\uffc7\077" +
    "\uffc7\001\002\000\004\076\053\001\002\000\004\076\051" +
    "\001\002\000\006\066\uffc8\077\uffc8\001\002\000\006\066" +
    "\uffc5\077\uffc5\001\002\000\004\101\052\001\002\000\006" +
    "\066\uffbf\077\uffbf\001\002\000\004\102\054\001\002\000" +
    "\006\066\uffc1\077\uffc1\001\002\000\004\101\056\001\002" +
    "\000\006\066\uffc0\077\uffc0\001\002\000\004\102\060\001" +
    "\002\000\006\066\uffbe\077\uffbe\001\002\000\004\101\062" +
    "\001\002\000\006\066\uffbc\077\uffbc\001\002\000\004\102" +
    "\064\001\002\000\006\066\uffbd\077\uffbd\001\002\000\016" +
    "\037\041\040\046\041\040\042\036\043\037\044\045\001" +
    "\002\000\006\005\uffca\065\uffca\001\002\000\006\066\uffc9" +
    "\077\uffc9\001\002\000\016\037\041\040\046\041\040\042" +
    "\036\043\037\044\071\001\002\000\004\076\072\001\002" +
    "\000\004\102\073\001\002\000\010\065\074\066\uffc1\077" +
    "\uffc1\001\002\000\016\016\105\022\103\026\104\031\112" +
    "\033\106\035\111\001\002\000\020\016\uffda\022\uffda\026" +
    "\uffda\031\uffda\033\uffda\035\uffda\064\uffda\001\002\000\020" +
    "\016\uffd8\022\uffd8\026\uffd8\031\uffd8\033\uffd8\035\uffd8\064" +
    "\uffd8\001\002\000\020\016\uffd6\022\uffd6\026\uffd6\031\uffd6" +
    "\033\uffd6\035\uffd6\064\uffd6\001\002\000\020\016\uffd4\022" +
    "\uffd4\026\uffd4\031\uffd4\033\uffd4\035\uffd4\064\uffd4\001\002" +
    "\000\020\016\105\022\103\026\104\031\112\033\106\035" +
    "\111\064\130\001\002\000\020\016\uffd5\022\uffd5\026\uffd5" +
    "\031\uffd5\033\uffd5\035\uffd5\064\uffd5\001\002\000\004\101" +
    "\125\001\002\000\004\102\123\001\002\000\004\102\121" +
    "\001\002\000\004\101\117\001\002\000\020\016\uffd9\022" +
    "\uffd9\026\uffd9\031\uffd9\033\uffd9\035\uffd9\064\uffd9\001\002" +
    "\000\020\016\uffd7\022\uffd7\026\uffd7\031\uffd7\033\uffd7\035" +
    "\uffd7\064\uffd7\001\002\000\004\102\115\001\002\000\004" +
    "\101\113\001\002\000\004\032\114\001\002\000\020\016" +
    "\uffd3\022\uffd3\026\uffd3\031\uffd3\033\uffd3\035\uffd3\064\uffd3" +
    "\001\002\000\004\036\116\001\002\000\020\016\uffce\022" +
    "\uffce\026\uffce\031\uffce\033\uffce\035\uffce\064\uffce\001\002" +
    "\000\004\034\120\001\002\000\020\016\uffd2\022\uffd2\026" +
    "\uffd2\031\uffd2\033\uffd2\035\uffd2\064\uffd2\001\002\000\004" +
    "\017\122\001\002\000\020\016\uffd1\022\uffd1\026\uffd1\031" +
    "\uffd1\033\uffd1\035\uffd1\064\uffd1\001\002\000\004\027\124" +
    "\001\002\000\020\016\uffd0\022\uffd0\026\uffd0\031\uffd0\033" +
    "\uffd0\035\uffd0\064\uffd0\001\002\000\004\023\126\001\002" +
    "\000\020\016\uffcf\022\uffcf\026\uffcf\031\uffcf\033\uffcf\035" +
    "\uffcf\064\uffcf\001\002\000\020\016\uffdb\022\uffdb\026\uffdb" +
    "\031\uffdb\033\uffdb\035\uffdb\064\uffdb\001\002\000\004\005" +
    "\uffdc\001\002\000\022\010\uffec\012\uffec\015\uffec\016\uffec" +
    "\020\uffec\022\uffec\024\uffec\026\uffec\001\002\000\022\010" +
    "\uffe6\012\uffe6\015\uffe6\016\uffe6\020\uffe6\022\uffe6\024\uffe6" +
    "\026\uffe6\001\002\000\022\010\uffe5\012\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\026\uffe5\001\002\000\022" +
    "\010\uffe7\012\uffe7\015\uffe7\016\uffe7\020\uffe7\022\uffe7\024" +
    "\uffe7\026\uffe7\001\002\000\004\101\167\001\002\000\022" +
    "\010\uffe9\012\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9\024" +
    "\uffe9\026\uffe9\001\002\000\022\010\135\012\147\015\166" +
    "\016\144\020\140\022\141\024\150\026\142\001\002\000" +
    "\004\102\163\001\002\000\004\101\161\001\002\000\004" +
    "\102\157\001\002\000\022\010\uffeb\012\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\022\uffeb\024\uffeb\026\uffeb\001\002\000\004" +
    "\102\155\001\002\000\022\010\uffe8\012\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\026\uffe8\001\002\000\022" +
    "\010\uffea\012\uffea\015\uffea\016\uffea\020\uffea\022\uffea\024" +
    "\uffea\026\uffea\001\002\000\004\104\153\001\002\000\004" +
    "\105\151\001\002\000\004\025\152\001\002\000\022\010" +
    "\uffdf\012\uffdf\015\uffdf\016\uffdf\020\uffdf\022\uffdf\024\uffdf" +
    "\026\uffdf\001\002\000\004\013\154\001\002\000\022\010" +
    "\uffe1\012\uffe1\015\uffe1\016\uffe1\020\uffe1\022\uffe1\024\uffe1" +
    "\026\uffe1\001\002\000\004\017\156\001\002\000\022\010" +
    "\uffe3\012\uffe3\015\uffe3\016\uffe3\020\uffe3\022\uffe3\024\uffe3" +
    "\026\uffe3\001\002\000\004\027\160\001\002\000\022\010" +
    "\uffde\012\uffde\015\uffde\016\uffde\020\uffde\022\uffde\024\uffde" +
    "\026\uffde\001\002\000\004\023\162\001\002\000\022\010" +
    "\uffe0\012\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0\024\uffe0" +
    "\026\uffe0\001\002\000\004\021\164\001\002\000\022\010" +
    "\uffe2\012\uffe2\015\uffe2\016\uffe2\020\uffe2\022\uffe2\024\uffe2" +
    "\026\uffe2\001\002\000\022\010\uffed\012\uffed\015\uffed\016" +
    "\uffed\020\uffed\022\uffed\024\uffed\026\uffed\001\002\000\004" +
    "\005\uffee\001\002\000\004\011\170\001\002\000\022\010" +
    "\uffe4\012\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4\024\uffe4" +
    "\026\uffe4\001\002\000\006\002\ufff7\004\ufff7\001\002\000" +
    "\010\007\ufff3\010\ufff3\012\ufff3\001\002\000\010\007\ufff4" +
    "\010\ufff4\012\ufff4\001\002\000\004\101\204\001\002\000" +
    "\004\104\202\001\002\000\010\007\201\010\174\012\175" +
    "\001\002\000\010\007\ufff2\010\ufff2\012\ufff2\001\002\000" +
    "\010\007\ufff5\010\ufff5\012\ufff5\001\002\000\004\005\ufff6" +
    "\001\002\000\004\013\203\001\002\000\010\007\ufff0\010" +
    "\ufff0\012\ufff0\001\002\000\004\011\205\001\002\000\010" +
    "\007\ufff1\010\ufff1\012\ufff1\001\002\000\006\002\uffef\004" +
    "\uffef\001\002\000\006\002\uffdd\004\uffdd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\020\002\004\003\007\004\003\005\006\013" +
    "\012\026\010\040\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\022\014\017\027\016\041\025\052" +
    "\021\001\001\000\002\001\001\000\014\004\015\005\006" +
    "\013\012\026\010\040\013\001\001\000\002\001\001\000" +
    "\020\002\014\003\007\004\003\005\006\013\012\026\010" +
    "\040\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\175\010\172\011\171\012\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\136" +
    "\016\130\017\142\020\145\021\135\022\144\023\133\024" +
    "\131\025\132\001\001\000\002\001\001\000\004\052\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\042\033\043\046\044\043\045\042\046\047" +
    "\047\041\050\032\051\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\043\066\044" +
    "\043\045\042\046\047\047\041\050\032\051\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\042\033\043" +
    "\046\044\043\045\042\046\047\047\041\050\032\051\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\100\031\074\032\106\033\075\034\107" +
    "\035\076\036\101\037\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\031\126\032\106\033\075\034\107\035\076\036\101\037" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\164\017\142\020\145\021\135\022" +
    "\144\023\133\024\131\025\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\177\011\171\012\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoT$actions {



  private final SintacticoT parser;

  /** Constructor */
  CUP$SintacticoT$actions(SintacticoT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoT$do_action(
    int                        CUP$SintacticoT$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoT$parser,
    java.util.Stack            CUP$SintacticoT$stack,
    int                        CUP$SintacticoT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoT$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TELEFONOA ::= tel igual rentero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		

Nodo padre = new Nodo("Telefono", aleft, aright);
            Nodo hijo_1 = new Nodo(a.toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TELEFONOA",39, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DIRECCIONA ::= dir igual tstring 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		

Nodo padre = new Nodo("Direccion", aleft, aright);
            Nodo hijo_1 = new Nodo(a.replaceAll("\"","").toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("DIRECCIONA",38, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NOMBREA ::= nom igual tstring 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
Nodo padre = new Nodo("Nombre", aleft, aright);
            Nodo hijo_1 = new Nodo(a.replaceAll("\"","").toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("NOMBREA",37, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PROPIETARIOA ::= pro igual rentero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
 Nodo padre = new Nodo("propietario", aleft, aright);
            Nodo hijo_1 = new Nodo(a.toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PROPIETARIOA",36, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CODIGOA ::= cod igual rentero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
  Nodo padre = new Nodo("Codigo", aleft, aright);
            Nodo hijo_1 = new Nodo(a.toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CODIGOA",35, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOA ::= tip igual tstring 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
 Nodo padre = new Nodo("Tipo", aleft, aright);
            Nodo hijo_1 = new Nodo(a.replaceAll("\"","").toString(), aleft, aright);
            padre.hijos.add(hijo_1);
            RESULT = padre;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TIPOA",34, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAA ::= TELEFONOA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAA ::= DIRECCIONA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAA ::= NOMBREA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		

RESULT=a;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAA ::= PROPIETARIOA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAA ::= CODIGOA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAA ::= TIPOA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIASA ::= SENTENCIAA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
Nodo lista = new Nodo("Bloque", aright, aleft);
lista.hijos.add(a);
RESULT = lista;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASA",32, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIASA ::= SENTENCIASA coma SENTENCIAA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
 a.hijos.add(b);
 RESULT = a;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASA",32, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUEA1 ::= llavei tipoT SENTENCIASA llavef 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).value;
		
Nodo cuerpo = new Nodo("Tienda", aright, aleft);
cuerpo.hijos.add(b);
RESULT = cuerpo;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUEA1",40, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUEA ::= BLOQUEA1 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
Nodo lista = new Nodo("Bloque", aright, aleft);
            lista.hijos.add(a);
            RESULT = lista;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUEA",31, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUEA ::= BLOQUEA BLOQUEA1 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
 a.hijos.add(b);
 RESULT = a;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUEA",31, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MODIFICACIONA ::= inicio BLOQUEA fin 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).value;
		
Nodo cuerpo = new Nodo("Modificacion", aright, aleft);
cuerpo.hijos.add(b);
RESULT = cuerpo;


              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("MODIFICACIONA",30, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IMGT ::= imgi tstring imgf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("IMGT",29, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TELEFONOT ::= telefonoi rentero telefonof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TELEFONOT",28, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DIRECCIONT ::= direccioni tstring direccionf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("DIRECCIONT",27, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NOMBRET ::= nombrei tstring nombref 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("NOMBRET",26, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PROPIETARIOT ::= propii rentero propif 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PROPIETARIOT",25, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CODIGOT ::= codi rentero codf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CODIGOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAT ::= IMGT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAT ::= TELEFONOT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAT ::= DIRECCIONT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAT ::= NOMBRET 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAT ::= PROPIETARIOT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAT ::= CODIGOT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAST ::= SENTENCIAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAST",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAST ::= SENTENCIAST SENTENCIAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAST",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUET ::= llavei tipoT tip igual tstring llavei SENTENCIAST tiendaf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUET",21, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REGISTROT ::= inicio BLOQUET fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("REGISTROT",20, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DIRECCIONR ::= direccioni tstring direccionf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("DIRECCIONR",19, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EMAILR ::= correoi idc correof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("EMAILR",18, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TELEFONOR ::= telefonoi rentero telefonof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TELEFONOR",17, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PASSWORDR ::= codigoi id codigof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PASSWORDR",16, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // APELLIDOR ::= apellidoi tstring apellidof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("APELLIDOR",15, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NOMBRER ::= nombrei tstring nombref 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("NOMBRER",14, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDR ::= idi rentero idf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("IDR",13, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAR ::= DIRECCIONR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAR ::= EMAILR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAR ::= TELEFONOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAR ::= PASSWORDR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAR ::= APELLIDOR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAR ::= NOMBRER 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAR ::= IDR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIASR ::= SENTENCIAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIASR ::= SENTENCIASR SENTENCIAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUER ::= creari SENTENCIASR crearf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUER",10, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REGISTRO ::= inicio BLOQUER fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("REGISTRO",9, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PASSWORD ::= codigoi id codigof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PASSWORD",8, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ID ::= idi rentero idf 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= PASSWORD 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= ID 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIA",6, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE ::= usuarioi SENTENCIAS usuariof 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LOGIN ::= inicio BLOQUE fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("LOGIN",3, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCIONES ::= MODIFICACIONA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPCIONES ::= REGISTROT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
RESULT=a;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCIONES ::= REGISTRO 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCIONES ::= LOGIN 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= OPCIONES 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
            Nodo lista = new Nodo("Opciones", sentenciaright, sentencialeft);
            lista.hijos.add(sentencia);
            RESULT = lista;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO OPCIONES 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
 lista.hijos.add(sentencia);
            RESULT = lista;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error INICIO 
            {
              Nodo RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.peek()).value;
		
           parser.raiz=raiz;
        
              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoT$parser.done_parsing();
          return CUP$SintacticoT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

