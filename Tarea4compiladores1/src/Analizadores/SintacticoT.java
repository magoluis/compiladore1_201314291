
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 14 18:43:16 CST 2016
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 14 18:43:16 CST 2016
  */
public class SintacticoT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoT() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\005\000" +
    "\002\005\005\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\005\000\002\011" +
    "\005\000\002\012\005\000\002\013\005\000\002\014\004" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\005\000\002\017" +
    "\005\000\002\020\005\000\002\021\005\000\002\022\005" +
    "\000\002\023\005\000\002\024\005\000\002\025\005\000" +
    "\002\026\012\000\002\027\004\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\005" +
    "\000\002\032\005\000\002\033\005\000\002\034\005\000" +
    "\002\035\005\000\002\036\005\000\002\037\005\000\002" +
    "\040\006\000\002\041\005\000\002\041\003\000\002\043" +
    "\005\000\002\044\005\000\002\045\005\000\002\046\005" +
    "\000\002\047\005\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\010\002\ufffe\003\006\004\013\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffa\001\002\000\010" +
    "\002\ufffe\003\006\004\013\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\151\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufffc\001\002\000\010\006\016\014\020\065" +
    "\021\001\002\000\004\005\150\001\002\000\004\005\147" +
    "\001\002\000\006\010\135\012\136\001\002\000\004\005" +
    "\132\001\002\000\020\010\076\012\111\016\105\020\101" +
    "\022\102\024\107\026\103\001\002\000\004\030\024\001" +
    "\002\000\004\005\023\001\002\000\004\002\uffcf\001\002" +
    "\000\004\044\027\001\002\000\006\066\uffcc\077\uffcc\001" +
    "\002\000\006\066\070\077\067\001\002\000\004\076\030" +
    "\001\002\000\004\102\031\001\002\000\004\065\032\001" +
    "\002\000\016\016\043\022\041\026\042\031\050\033\044" +
    "\035\047\001\002\000\020\016\uffdc\022\uffdc\026\uffdc\031" +
    "\uffdc\033\uffdc\035\uffdc\064\uffdc\001\002\000\020\016\uffda" +
    "\022\uffda\026\uffda\031\uffda\033\uffda\035\uffda\064\uffda\001" +
    "\002\000\020\016\uffd8\022\uffd8\026\uffd8\031\uffd8\033\uffd8" +
    "\035\uffd8\064\uffd8\001\002\000\020\016\uffd6\022\uffd6\026" +
    "\uffd6\031\uffd6\033\uffd6\035\uffd6\064\uffd6\001\002\000\020" +
    "\016\uffd7\022\uffd7\026\uffd7\031\uffd7\033\uffd7\035\uffd7\064" +
    "\uffd7\001\002\000\020\016\043\022\041\026\042\031\050" +
    "\033\044\035\047\064\066\001\002\000\004\101\063\001" +
    "\002\000\004\102\061\001\002\000\004\102\057\001\002" +
    "\000\004\101\055\001\002\000\020\016\uffdb\022\uffdb\026" +
    "\uffdb\031\uffdb\033\uffdb\035\uffdb\064\uffdb\001\002\000\020" +
    "\016\uffd9\022\uffd9\026\uffd9\031\uffd9\033\uffd9\035\uffd9\064" +
    "\uffd9\001\002\000\004\102\053\001\002\000\004\101\051" +
    "\001\002\000\004\032\052\001\002\000\020\016\uffd5\022" +
    "\uffd5\026\uffd5\031\uffd5\033\uffd5\035\uffd5\064\uffd5\001\002" +
    "\000\004\036\054\001\002\000\020\016\uffd0\022\uffd0\026" +
    "\uffd0\031\uffd0\033\uffd0\035\uffd0\064\uffd0\001\002\000\004" +
    "\034\056\001\002\000\020\016\uffd4\022\uffd4\026\uffd4\031" +
    "\uffd4\033\uffd4\035\uffd4\064\uffd4\001\002\000\004\017\060" +
    "\001\002\000\020\016\uffd3\022\uffd3\026\uffd3\031\uffd3\033" +
    "\uffd3\035\uffd3\064\uffd3\001\002\000\004\027\062\001\002" +
    "\000\020\016\uffd2\022\uffd2\026\uffd2\031\uffd2\033\uffd2\035" +
    "\uffd2\064\uffd2\001\002\000\004\023\064\001\002\000\020" +
    "\016\uffd1\022\uffd1\026\uffd1\031\uffd1\033\uffd1\035\uffd1\064" +
    "\uffd1\001\002\000\020\016\uffdd\022\uffdd\026\uffdd\031\uffdd" +
    "\033\uffdd\035\uffdd\064\uffdd\001\002\000\004\005\uffde\001" +
    "\002\000\002\001\002\000\004\005\uffce\001\002\000\006" +
    "\066\uffcd\077\uffcd\001\002\000\022\010\uffee\012\uffee\015" +
    "\uffee\016\uffee\020\uffee\022\uffee\024\uffee\026\uffee\001\002" +
    "\000\022\010\uffe8\012\uffe8\015\uffe8\016\uffe8\020\uffe8\022" +
    "\uffe8\024\uffe8\026\uffe8\001\002\000\022\010\uffe7\012\uffe7" +
    "\015\uffe7\016\uffe7\020\uffe7\022\uffe7\024\uffe7\026\uffe7\001" +
    "\002\000\022\010\uffe9\012\uffe9\015\uffe9\016\uffe9\020\uffe9" +
    "\022\uffe9\024\uffe9\026\uffe9\001\002\000\004\101\130\001" +
    "\002\000\022\010\076\012\111\015\126\016\105\020\101" +
    "\022\102\024\107\026\103\001\002\000\022\010\uffeb\012" +
    "\uffeb\015\uffeb\016\uffeb\020\uffeb\022\uffeb\024\uffeb\026\uffeb" +
    "\001\002\000\004\102\124\001\002\000\004\101\122\001" +
    "\002\000\004\102\120\001\002\000\022\010\uffed\012\uffed" +
    "\015\uffed\016\uffed\020\uffed\022\uffed\024\uffed\026\uffed\001" +
    "\002\000\004\102\116\001\002\000\022\010\uffea\012\uffea" +
    "\015\uffea\016\uffea\020\uffea\022\uffea\024\uffea\026\uffea\001" +
    "\002\000\004\105\114\001\002\000\022\010\uffec\012\uffec" +
    "\015\uffec\016\uffec\020\uffec\022\uffec\024\uffec\026\uffec\001" +
    "\002\000\004\104\112\001\002\000\004\013\113\001\002" +
    "\000\022\010\uffe3\012\uffe3\015\uffe3\016\uffe3\020\uffe3\022" +
    "\uffe3\024\uffe3\026\uffe3\001\002\000\004\025\115\001\002" +
    "\000\022\010\uffe1\012\uffe1\015\uffe1\016\uffe1\020\uffe1\022" +
    "\uffe1\024\uffe1\026\uffe1\001\002\000\004\017\117\001\002" +
    "\000\022\010\uffe5\012\uffe5\015\uffe5\016\uffe5\020\uffe5\022" +
    "\uffe5\024\uffe5\026\uffe5\001\002\000\004\027\121\001\002" +
    "\000\022\010\uffe0\012\uffe0\015\uffe0\016\uffe0\020\uffe0\022" +
    "\uffe0\024\uffe0\026\uffe0\001\002\000\004\023\123\001\002" +
    "\000\022\010\uffe2\012\uffe2\015\uffe2\016\uffe2\020\uffe2\022" +
    "\uffe2\024\uffe2\026\uffe2\001\002\000\004\021\125\001\002" +
    "\000\022\010\uffe4\012\uffe4\015\uffe4\016\uffe4\020\uffe4\022" +
    "\uffe4\024\uffe4\026\uffe4\001\002\000\004\005\ufff0\001\002" +
    "\000\022\010\uffef\012\uffef\015\uffef\016\uffef\020\uffef\022" +
    "\uffef\024\uffef\026\uffef\001\002\000\004\011\131\001\002" +
    "\000\022\010\uffe6\012\uffe6\015\uffe6\016\uffe6\020\uffe6\022" +
    "\uffe6\024\uffe6\026\uffe6\001\002\000\004\002\ufff9\001\002" +
    "\000\010\007\ufff5\010\ufff5\012\ufff5\001\002\000\010\007" +
    "\ufff6\010\ufff6\012\ufff6\001\002\000\004\101\145\001\002" +
    "\000\004\104\143\001\002\000\010\007\142\010\135\012" +
    "\136\001\002\000\010\007\ufff4\010\ufff4\012\ufff4\001\002" +
    "\000\010\007\ufff7\010\ufff7\012\ufff7\001\002\000\004\005" +
    "\ufff8\001\002\000\004\013\144\001\002\000\010\007\ufff2" +
    "\010\ufff2\012\ufff2\001\002\000\004\011\146\001\002\000" +
    "\010\007\ufff3\010\ufff3\012\ufff3\001\002\000\004\002\ufff1" +
    "\001\002\000\004\002\uffdf\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\016\002\007\003\010\004\003\012\011\025" +
    "\006\037\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\151\003\010\004\003\012\011\025\006\037" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\016\013\014\026" +
    "\013\040\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\136\007\133\010\132\011\137\001\001\000" +
    "\002\001\001\000\024\014\076\015\071\016\103\017\107" +
    "\020\077\021\105\022\074\023\072\024\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\025\042\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\027\037\030\032\031\044\032\033\033\045\034" +
    "\034\035\036\036\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\030\064\031\044\032\033\033\045\034\034" +
    "\035\036\036\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\126\016\103\017\107\020\077\021\105\022\074\023" +
    "\072\024\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\140\010\132\011\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public Nodo raiz;

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        System.out.println("Error Sintactico Recuperado /////// lexema: " +s.value+ " Fila: " +s.right+ " Columna: "+s.left);       
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.out.println("Error Sintactico Panico ////// Lexema: " +s.value+" Fila: "+s.right+ " Columna: "+s.left);        
    }


    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoT$actions {



  private final SintacticoT parser;

  /** Constructor */
  CUP$SintacticoT$actions(SintacticoT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoT$do_action(
    int                        CUP$SintacticoT$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoT$parser,
    java.util.Stack            CUP$SintacticoT$stack,
    int                        CUP$SintacticoT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoT$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TELEFONOA ::= tel igual rentero 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TELEFONOA",38, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIRECCIONA ::= dir igual tstring 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("DIRECCIONA",37, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NOMBREA ::= nom igual tstring 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("NOMBREA",36, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROPIETARIOA ::= pro igual rentero 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PROPIETARIOA",35, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CODIGOA ::= cod igual rentero 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CODIGOA",34, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOA ::= tip igual tstring 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TIPOA",33, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIASA ::= SENTENCIAA 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASA",31, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIASA ::= SENTENCIASA coma SENTENCIAA 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASA",31, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUEA ::= llavei tipoT SENTENCIASA llavef 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUEA",30, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MODIFICACIONA ::= inicio BLOQUEA fin 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("MODIFICACIONA",29, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMGT ::= imgi tstring imgf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("IMGT",28, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TELEFONOT ::= telefonoi rentero telefonof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TELEFONOT",27, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DIRECCIONT ::= direccioni tstring direccionf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("DIRECCIONT",26, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NOMBRET ::= nombrei tstring nombref 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("NOMBRET",25, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PROPIETARIOT ::= propii rentero propif 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PROPIETARIOT",24, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CODIGOT ::= codi rentero codf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CODIGOT",23, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAT ::= IMGT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAT ::= TELEFONOT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAT ::= DIRECCIONT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAT ::= NOMBRET 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIAT ::= PROPIETARIOT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIAT ::= CODIGOT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAT",22, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAST ::= SENTENCIAT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAST",21, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAST ::= SENTENCIAST SENTENCIAT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAST",21, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUET ::= llavei tipoT tip igual tstring llavei SENTENCIAST tiendaf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUET",20, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // REGISTROT ::= inicio BLOQUET fin 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("REGISTROT",19, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIRECCIONR ::= direccioni tstring direccionf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("DIRECCIONR",18, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EMAILR ::= correoi idc correof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("EMAILR",17, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TELEFONOR ::= telefonoi rentero telefonof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("TELEFONOR",16, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PASSWORDR ::= codigoi id codigof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PASSWORDR",15, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // APELLIDOR ::= apellidoi tstring apellidof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("APELLIDOR",14, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NOMBRER ::= nombrei tstring nombref 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("NOMBRER",13, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDR ::= idi rentero idf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("IDR",12, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAR ::= DIRECCIONR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAR ::= EMAILR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAR ::= TELEFONOR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAR ::= PASSWORDR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAR ::= APELLIDOR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAR ::= NOMBRER 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAR ::= IDR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIASR ::= SENTENCIAR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASR",10, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIASR ::= SENTENCIASR SENTENCIAR 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIASR",10, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUER ::= creari SENTENCIASR crearf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUER",9, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REGISTRO ::= inicio BLOQUER fin 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("REGISTRO",8, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PASSWORD ::= codigoi id codigof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("PASSWORD",7, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ID ::= idi rentero idf 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= PASSWORD 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIA",5, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE ::= usuarioi SENTENCIAS usuariof 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("BLOQUE",3, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LOGIN ::= inicio BLOQUE fin 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("LOGIN",2, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= MODIFICACIONA 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= REGISTROT 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= REGISTRO 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= LOGIN 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error INICIO 
            {
              Object RESULT =null;

              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT =null;
		
           // parser.raiz=raiz;
        
              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          return CUP$SintacticoT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.elementAt(CUP$SintacticoT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoT$parser.done_parsing();
          return CUP$SintacticoT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

