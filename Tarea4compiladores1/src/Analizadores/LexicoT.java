/* The following code was generated by JFlex 1.4.3 on 14/03/16 18:43 */

/*----------------------------------------------------------------------------
----------------------------------------- Area de Codigo de Usuario
----------------------------------------------------------------------------*/

//-------------------> Importaciones 
//-------------------> Paquetes 
package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/03/16 18:43 from the specification file
 * <tt>src/Analizadores/lexicoT.jflex</tt>
 */
public class LexicoT implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMENT_SIMPLE = 2;
  public static final int YYINITIAL = 0;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\20\1\0\2\47\22\0\1\47\1\0\1\5\1\0"+
    "\1\23\2\0\1\6\1\45\1\46\1\22\1\4\1\43\1\2\1\3"+
    "\1\21\1\1\1\17\10\1\1\0\1\42\1\0\1\44\2\0\1\11"+
    "\1\33\1\36\1\12\1\34\1\25\1\40\1\41\1\7\1\16\2\7"+
    "\1\37\1\14\1\32\1\13\1\15\1\26\1\24\1\30\1\31\1\27"+
    "\1\7\1\35\3\7\4\0\1\10\1\0\1\33\1\36\1\12\1\34"+
    "\1\25\1\40\1\41\1\7\1\16\2\7\1\37\1\14\1\32\1\13"+
    "\1\15\1\26\1\24\1\30\1\31\1\27\1\7\1\35\3\7\126\0"+
    "\1\7\37\0\1\7\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\2\1\3\5\1\6"+
    "\1\7\1\10\1\11\4\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\17\1\0\1\5\1\0"+
    "\1\22\1\2\1\0\1\23\1\0\1\24\1\0\3\5"+
    "\1\25\1\26\13\0\5\5\1\27\1\0\3\5\22\0"+
    "\6\5\1\0\3\5\12\0\1\30\11\0\1\5\1\31"+
    "\4\5\1\0\3\5\11\0\1\32\1\0\1\33\11\0"+
    "\5\5\1\0\1\34\2\5\10\0\1\35\12\0\1\5"+
    "\1\36\1\5\1\37\1\5\1\0\2\5\2\0\1\40"+
    "\3\0\1\41\6\0\1\42\7\0\3\5\1\0\1\43"+
    "\1\5\1\0\1\44\1\45\2\0\1\46\5\0\1\47"+
    "\4\0\1\50\1\0\1\51\2\0\1\52\1\53\1\5"+
    "\1\0\1\5\1\54\7\0\1\55\1\0\1\56\1\0"+
    "\1\57\1\60\2\0\1\61\1\0\1\5\2\0\1\62"+
    "\3\0\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\1\0\1\67\2\0\1\70\1\0\1\71\1\0\1\72"+
    "\1\73\1\0\1\74\1\75\1\76\1\0\1\77\1\100"+
    "\3\0\1\101\2\0\1\102\2\0\1\103\1\104\1\0"+
    "\1\105\1\0\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\170\0\u01e0\0\170\0\u0208"+
    "\0\u0230\0\u0258\0\u0280\0\u02a8\0\170\0\170\0\170\0\170"+
    "\0\170\0\170\0\170\0\170\0\u02d0\0\u02f8\0\u0320\0\u0348"+
    "\0\170\0\360\0\u0118\0\170\0\u0140\0\170\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\170\0\170\0\u0410\0\u0438\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848"+
    "\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988"+
    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8"+
    "\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08"+
    "\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\170"+
    "\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0168\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\170\0\u1180\0\170\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u0168\0\u1400"+
    "\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540"+
    "\0\u1568\0\170\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658"+
    "\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u0168\0\u1748\0\u0168"+
    "\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\170\0\u1860"+
    "\0\u1888\0\u18b0\0\170\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978"+
    "\0\u19a0\0\170\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90"+
    "\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u0168\0\u1b80\0\u1ba8"+
    "\0\170\0\170\0\u1bd0\0\u1bf8\0\170\0\u1c20\0\u1c48\0\u1c70"+
    "\0\u1c98\0\u1cc0\0\170\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\170"+
    "\0\u1d88\0\170\0\u1db0\0\u1dd8\0\u0168\0\u0168\0\u1e00\0\u1e28"+
    "\0\u1e50\0\170\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\170\0\u1f90\0\170\0\u1fb8\0\170\0\170\0\u1fe0"+
    "\0\u2008\0\u0168\0\u2030\0\u2058\0\u2080\0\u20a8\0\170\0\u20d0"+
    "\0\u20f8\0\u2120\0\170\0\u2148\0\170\0\u2170\0\170\0\u2198"+
    "\0\170\0\u21c0\0\170\0\u21e8\0\u2210\0\u0168\0\u2238\0\170"+
    "\0\u2260\0\170\0\170\0\u2288\0\170\0\170\0\170\0\u22b0"+
    "\0\170\0\170\0\u22d8\0\u2300\0\u2328\0\170\0\u2350\0\u2378"+
    "\0\170\0\u23a0\0\u23c8\0\170\0\170\0\u23f0\0\170\0\u2418"+
    "\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\2\4\1\13\2\12\1\14\1\12\1\5\1\15\1\16"+
    "\1\17\1\20\4\12\1\21\1\22\1\23\1\12\1\24"+
    "\5\12\1\25\1\26\1\27\1\30\1\31\1\15\20\32"+
    "\1\33\27\32\20\34\1\15\1\34\1\35\25\34\51\0"+
    "\1\5\1\0\1\36\3\0\2\37\1\0\5\37\1\5"+
    "\4\0\16\37\7\0\1\40\15\0\1\40\3\0\1\41"+
    "\25\0\1\42\15\0\1\42\30\0\5\43\1\44\42\43"+
    "\6\45\1\46\41\45\1\0\1\37\5\0\1\12\1\37"+
    "\1\47\5\12\1\37\4\0\16\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\1\12\1\50\3\12\1\37\4\0"+
    "\7\12\1\51\6\12\7\0\1\37\5\0\1\12\1\37"+
    "\1\47\5\12\1\37\4\0\1\52\15\12\27\0\1\53"+
    "\1\54\37\0\1\55\1\0\1\56\1\57\1\60\5\0"+
    "\1\61\1\62\2\0\1\63\1\64\1\65\1\66\1\67"+
    "\14\0\1\37\5\0\1\12\1\37\1\47\5\12\1\37"+
    "\4\0\3\12\1\70\12\12\7\0\1\37\5\0\1\12"+
    "\1\37\1\47\4\12\1\71\1\37\4\0\1\12\1\72"+
    "\14\12\7\0\1\37\5\0\1\12\1\37\1\47\1\12"+
    "\1\73\3\12\1\37\4\0\16\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\4\12\1\74\1\37\4\0\16\12"+
    "\27\0\1\33\27\0\1\75\15\0\1\75\31\0\1\37"+
    "\5\0\2\37\1\0\6\37\4\0\16\37\7\0\1\40"+
    "\1\0\1\36\13\0\1\40\42\0\1\76\36\0\1\37"+
    "\5\0\1\12\1\37\1\47\5\12\1\37\4\0\10\12"+
    "\1\77\5\12\7\0\1\37\5\0\1\12\1\37\1\47"+
    "\5\12\1\37\4\0\6\12\1\100\7\12\7\0\1\37"+
    "\5\0\1\12\1\37\1\47\1\12\1\101\3\12\1\37"+
    "\4\0\16\12\21\0\1\102\10\0\1\103\6\0\1\104"+
    "\47\0\1\105\40\0\1\106\6\0\1\107\30\0\1\110"+
    "\15\0\1\111\1\0\1\112\40\0\1\113\36\0\1\114"+
    "\62\0\1\115\36\0\1\116\6\0\1\117\5\0\1\120"+
    "\27\0\1\121\51\0\1\122\50\0\1\123\32\0\1\37"+
    "\5\0\1\12\1\37\1\47\1\124\4\12\1\37\4\0"+
    "\16\12\7\0\1\37\5\0\1\12\1\37\1\47\3\12"+
    "\1\125\1\12\1\37\4\0\1\12\1\126\14\12\7\0"+
    "\1\37\5\0\1\12\1\37\1\47\5\12\1\37\4\0"+
    "\13\12\1\127\2\12\7\0\1\37\5\0\1\12\1\37"+
    "\1\47\2\12\1\130\2\12\1\37\4\0\16\12\7\0"+
    "\1\37\5\0\1\12\1\37\1\47\5\12\1\37\4\0"+
    "\1\131\15\12\7\0\1\75\1\0\1\36\13\0\1\75"+
    "\43\0\1\132\35\0\1\37\5\0\1\12\1\37\1\47"+
    "\4\12\1\133\1\37\4\0\16\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\5\12\1\134"+
    "\10\12\7\0\1\37\5\0\1\12\1\37\1\47\3\12"+
    "\1\135\1\12\1\37\4\0\16\12\42\0\1\136\2\0"+
    "\1\137\35\0\1\140\54\0\1\141\41\0\1\142\36\0"+
    "\1\143\64\0\1\144\60\0\1\145\24\0\1\146\33\0"+
    "\1\147\20\0\1\150\52\0\1\151\54\0\1\152\26\0"+
    "\1\153\62\0\1\154\61\0\1\155\24\0\1\156\47\0"+
    "\1\157\60\0\1\160\46\0\1\161\24\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\3\12\1\162"+
    "\12\12\7\0\1\37\5\0\1\12\1\37\1\47\1\12"+
    "\1\163\3\12\1\37\4\0\16\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\6\12\1\164"+
    "\7\12\7\0\1\37\5\0\1\12\1\37\1\47\5\12"+
    "\1\37\4\0\1\12\1\165\14\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\12\12\1\166"+
    "\3\12\7\0\1\37\5\0\1\12\1\37\1\47\5\12"+
    "\1\37\4\0\1\12\1\167\14\12\22\0\1\170\34\0"+
    "\1\37\5\0\1\12\1\37\1\47\5\12\1\37\4\0"+
    "\15\12\1\171\7\0\1\37\5\0\1\12\1\37\1\47"+
    "\4\12\1\172\1\37\4\0\16\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\4\12\1\173\1\37\4\0\16\12"+
    "\24\0\1\174\44\0\1\175\67\0\1\176\45\0\1\177"+
    "\30\0\1\200\52\0\1\201\16\0\1\202\43\0\1\203"+
    "\21\0\1\204\20\0\1\205\36\0\1\206\60\0\1\207"+
    "\53\0\1\210\36\0\1\211\60\0\1\212\52\0\1\213"+
    "\42\0\1\214\55\0\1\215\52\0\1\216\50\0\1\217"+
    "\35\0\1\220\23\0\1\37\5\0\1\12\1\37\1\47"+
    "\5\12\1\37\4\0\1\221\15\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\10\12\1\222"+
    "\5\12\7\0\1\37\5\0\1\12\1\37\1\47\5\12"+
    "\1\37\4\0\14\12\1\223\1\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\1\224\15\12"+
    "\7\0\1\37\5\0\1\12\1\37\1\47\1\225\4\12"+
    "\1\37\4\0\16\12\23\0\1\226\33\0\1\37\5\0"+
    "\1\12\1\37\1\47\1\12\1\227\3\12\1\37\4\0"+
    "\16\12\7\0\1\37\5\0\1\12\1\37\1\47\5\12"+
    "\1\37\4\0\10\12\1\230\5\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\1\12\1\231"+
    "\14\12\47\0\1\232\32\0\1\233\47\0\1\234\41\0"+
    "\1\235\64\0\1\236\32\0\1\237\60\0\1\240\55\0"+
    "\1\241\35\0\1\242\42\0\1\243\56\0\1\244\61\0"+
    "\1\245\34\0\1\246\57\0\1\247\53\0\1\250\41\0"+
    "\1\251\41\0\1\252\62\0\1\253\22\0\1\254\36\0"+
    "\1\37\5\0\1\12\1\37\1\47\5\12\1\37\4\0"+
    "\4\12\1\255\11\12\7\0\1\37\5\0\1\12\1\37"+
    "\1\47\5\12\1\37\4\0\7\12\1\256\6\12\7\0"+
    "\1\37\5\0\1\12\1\37\1\47\1\12\1\257\3\12"+
    "\1\37\4\0\16\12\7\0\1\37\5\0\1\12\1\37"+
    "\1\47\5\12\1\37\4\0\1\12\1\260\14\12\7\0"+
    "\1\37\5\0\1\12\1\37\1\47\1\261\4\12\1\37"+
    "\4\0\16\12\24\0\1\262\32\0\1\37\5\0\1\12"+
    "\1\37\1\47\5\12\1\37\4\0\7\12\1\263\6\12"+
    "\7\0\1\37\5\0\1\12\1\37\1\47\5\12\1\37"+
    "\4\0\5\12\1\264\10\12\21\0\1\265\36\0\1\266"+
    "\20\0\1\267\53\0\1\270\54\0\1\271\15\0\1\272"+
    "\20\0\1\273\51\0\1\274\34\0\1\275\50\0\1\276"+
    "\47\0\1\277\64\0\1\300\21\0\1\301\20\0\1\302"+
    "\54\0\1\303\52\0\1\304\27\0\1\305\47\0\1\306"+
    "\61\0\1\307\40\0\1\310\43\0\1\311\36\0\1\37"+
    "\5\0\1\12\1\37\1\47\5\12\1\37\4\0\7\12"+
    "\1\312\6\12\7\0\1\37\5\0\1\12\1\37\1\47"+
    "\5\12\1\37\4\0\6\12\1\313\7\12\7\0\1\37"+
    "\5\0\1\12\1\37\1\47\4\12\1\314\1\37\4\0"+
    "\16\12\25\0\1\315\31\0\1\37\5\0\1\12\1\37"+
    "\1\47\5\12\1\37\4\0\10\12\1\316\5\12\7\0"+
    "\1\37\5\0\1\12\1\37\1\47\5\12\1\37\4\0"+
    "\7\12\1\317\6\12\10\0\1\320\20\0\1\321\47\0"+
    "\1\322\54\0\1\323\52\0\1\324\37\0\1\325\55\0"+
    "\1\326\47\0\1\327\42\0\1\330\52\0\1\331\51\0"+
    "\1\332\41\0\1\333\57\0\1\334\16\0\1\335\77\0"+
    "\1\336\17\0\1\337\20\0\1\340\26\0\1\341\20\0"+
    "\1\342\60\0\1\343\31\0\1\344\32\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\13\12\1\345"+
    "\2\12\7\0\1\37\5\0\1\12\1\37\1\47\1\12"+
    "\1\346\3\12\1\37\4\0\16\12\7\0\1\37\5\0"+
    "\1\12\1\37\1\47\1\12\1\347\3\12\1\37\4\0"+
    "\16\12\6\0\20\350\1\0\27\350\1\0\1\37\5\0"+
    "\1\12\1\37\1\47\5\12\1\37\4\0\1\351\15\12"+
    "\31\0\1\352\53\0\1\353\54\0\1\354\46\0\1\355"+
    "\27\0\1\356\70\0\1\357\43\0\1\360\21\0\1\361"+
    "\20\0\1\362\63\0\1\363\33\0\1\364\37\0\1\365"+
    "\57\0\1\366\47\0\1\367\37\0\1\370\47\0\1\371"+
    "\35\0\1\37\5\0\1\12\1\37\1\47\5\12\1\37"+
    "\4\0\6\12\1\372\7\12\20\0\1\373\36\0\1\37"+
    "\5\0\1\12\1\37\1\47\4\12\1\374\1\37\4\0"+
    "\16\12\41\0\1\375\16\0\1\376\20\0\1\377\50\0"+
    "\1\u0100\25\0\1\u0101\47\0\1\u0102\20\0\1\u0103\53\0"+
    "\1\u0104\43\0\1\u0105\26\0\1\u0106\20\0\1\u0107\26\0"+
    "\1\u0108\20\0\1\u0109\26\0\1\u010a\20\0\1\u010b\56\0"+
    "\1\u010c\30\0\1\u010d\35\0\1\37\5\0\1\12\1\37"+
    "\1\47\1\12\1\u010e\3\12\1\37\4\0\16\12\32\0"+
    "\1\u010f\46\0\1\u0110\42\0\1\u0111\54\0\1\u0112\47\0"+
    "\1\u0113\57\0\1\u0114\37\0\1\u0115\47\0\1\u0116\47\0"+
    "\1\u0117\26\0\1\u0118\20\0\1\u0119\40\0\1\u011a\51\0"+
    "\1\u011b\44\0\1\u011c\60\0\1\u011d\46\0\1\u011e\37\0"+
    "\1\u011f\36\0\1\u0120\20\0\1\u0121\42\0\1\u0122\33\0"+
    "\1\u0123\20\0\1\u0124\47\0\1\u0125\37\0\1\u0126\57\0"+
    "\1\u0127\26\0\1\u0128\20\0\1\u0129\47\0\1\u012a\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\1\11\1\1\1\11\5\1\10\11"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\1\0\1\11\1\0\3\1\2\11\13\0\6\1\1\0"+
    "\3\1\22\0\6\1\1\0\3\1\12\0\1\11\11\0"+
    "\6\1\1\0\3\1\11\0\1\11\1\0\1\11\11\0"+
    "\5\1\1\0\3\1\10\0\1\11\12\0\5\1\1\0"+
    "\2\1\2\0\1\11\3\0\1\11\6\0\1\11\7\0"+
    "\3\1\1\0\2\1\1\0\2\11\2\0\1\11\5\0"+
    "\1\11\4\0\1\11\1\0\1\11\2\0\3\1\1\0"+
    "\1\1\1\11\7\0\1\11\1\0\1\11\1\0\2\11"+
    "\2\0\1\1\1\0\1\1\2\0\1\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\3\0\1\11\2\0\1\11\2\0\2\11"+
    "\1\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //-------------------> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoT(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicoT(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { System.out.println("Reconocido: <<"+yytext()+">>,cantidadi");
                                return new Symbol(Simbolos.cantidadi, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 6: 
          { /* Espacios en blanco, se ignoran */
          }
        case 73: break;
        case 47: 
          { System.out.println("Reconocido: <<"+yytext()+">>, tamanof");
                                return new Symbol(Simbolos.tamanof, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 8: 
          { System.out.println("Reconocido: <<"+yytext()+">>, por");
                            return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 31: 
          { System.out.println("Reconocido: <<"+yytext()+">>, nom");
                                return new Symbol(Simbolos.nom, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 35: 
          { System.out.println("Reconocido: <<"+yytext()+">>, cant");
                                return new Symbol(Simbolos.cant, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 5: 
          { System.out.println("Reconocido: <<"+yytext()+">>, id ");
                                return new Symbol(Simbolos.id, yycolumn, yyline, new String (yytext()));
          }
        case 78: break;
        case 9: 
          { System.out.println("Reconocido: <<"+yytext()+">>,llavei");
                                return new Symbol(Simbolos.llavei, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 30: 
          { System.out.println("Reconocido: <<"+yytext()+">>,tipoT");
                                return new Symbol(Simbolos.tipoT, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 71: 
          { System.out.println("Reconocido: <<"+yytext()+">>, usuariof");
                                return new Symbol(Simbolos.usuariof, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 23: 
          { System.out.println("Reconocido: <<"+yytext()+">>, rdecimal");
                                return new Symbol(Simbolos.rdecimal, yycolumn, yyline, new String (yytext()));
          }
        case 82: break;
        case 51: 
          { System.out.println("Reconocido: <<"+yytext()+">>,codigoi");
                                return new Symbol(Simbolos.codigoi, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 66: 
          { System.out.println("Reconocido: <<"+yytext()+">>,propii");
                                return new Symbol(Simbolos.propii, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 48: 
          { System.out.println("Reconocido: <<"+yytext()+">>,nombref");
                                return new Symbol(Simbolos.nombref, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 29: 
          { System.out.println("Reconocido: <<"+yytext()+">>,imgf");
                                return new Symbol(Simbolos.imgf, yycolumn, yyline, yytext());
          }
        case 86: break;
        case 1: 
          { System.out.println("Error Lexico: <<"+yytext()+">> Linea: "+yyline+" ,Columna: "+yycolumn);
          }
        case 87: break;
        case 27: 
          { System.out.println("Reconocido: <<"+yytext()+">>,idf");
                                return new Symbol(Simbolos.idf, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 18: 
          { System.out.println("Reconocido: <<"+yytext()+">>, llavef");
                                return new Symbol(Simbolos.llavef, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 7: 
          { System.out.println("Reconocido: <<"+yytext()+">>, div");
                            return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 67: 
          { System.out.println("Reconocido: <<"+yytext()+">>,creari");
                                return new Symbol(Simbolos.creari, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 52: 
          { System.out.println("Reconocido: <<"+yytext()+">>,fin");
                                return new Symbol(Simbolos.fin, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 44: 
          { System.out.println("Reconocido: <<"+yytext()+">>,codf");
                                return new Symbol(Simbolos.codf, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 26: 
          { System.out.println("Reconocido: <<"+yytext()+">>, imgi");
                                return new Symbol(Simbolos.imgi, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 58: 
          { System.out.println("Reconocido: <<"+yytext()+">>, productof");
                                return new Symbol(Simbolos.productof, yycolumn, yyline, yytext());
          }
        case 95: break;
        case 11: 
          { System.out.println("Reconocido: <<"+yytext()+">>, coma");
                            return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 45: 
          { System.out.println("Reconocido: <<"+yytext()+">>,inicio");
                                return new Symbol(Simbolos.inicio, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 2: 
          { System.out.println("Reconocido: <<"+yytext()+">>, rentero");
                                return new Symbol(Simbolos.rentero, yycolumn, yyline, new String( yytext()));
          }
        case 98: break;
        case 16: 
          { yybegin(YYINITIAL);
          }
        case 99: break;
        case 10: 
          { System.out.println("Reconocido: <<"+yytext()+">>, pcoma");
                            return new Symbol(Simbolos.pcoma, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 65: 
          { System.out.println("Reconocido: <<"+yytext()+">>, direccionf");
                                return new Symbol(Simbolos.direccionf, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 3: 
          { System.out.println("Reconocido: <<"+yytext()+">>, menos");
                            return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 61: 
          { System.out.println("Reconocido: <<"+yytext()+">>, telefonof");
                                return new Symbol(Simbolos.telefonof, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 54: 
          { System.out.println("Reconocido: <<"+yytext()+">>, telefonoi");
                                return new Symbol(Simbolos.telefonoi, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 22: 
          { yybegin(COMENT_MULTI);
          }
        case 105: break;
        case 36: 
          { System.out.println("Reconocido: <<"+yytext()+">>,codi");
                                return new Symbol(Simbolos.codi, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 14: 
          { System.out.println("Reconocido: <<"+yytext()+">>, cpar");
                            return new Symbol(Simbolos.cpar, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 68: 
          { System.out.println("Reconocido: <<"+yytext()+">>,propif");
                                return new Symbol(Simbolos.propif, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 63: 
          { System.out.println("Reconocido: <<"+yytext()+">>,direccioni");
                                return new Symbol(Simbolos.direccioni, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 20: 
          { System.out.println("Reconocido: <<"+yytext()+">>, tchar ");
                                return new Symbol(Simbolos.tchar, yycolumn, yyline,new String( yytext()));
          }
        case 110: break;
        case 59: 
          { System.out.println("Reconocido: <<"+yytext()+">>,codigof");
                                return new Symbol(Simbolos.codigof, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 69: 
          { System.out.println("Reconocido: <<"+yytext()+">>,crearf");
                                return new Symbol(Simbolos.crearf, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 21: 
          { yybegin(COMENT_SIMPLE);
          }
        case 113: break;
        case 17: 
          { /* Omitir como es un comentario :D */
          }
        case 114: break;
        case 34: 
          { System.out.println("Reconocido: <<"+yytext()+">>,correoi");
                                return new Symbol(Simbolos.correoi, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 4: 
          { System.out.println("Reconocido: <<"+yytext()+">>, mas");
                            return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 60: 
          { System.out.println("Reconocido: <<"+yytext()+">>, sucursalf");
                                return new Symbol(Simbolos.sucursalf, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 53: 
          { System.out.println("Reconocido: <<"+yytext()+">>, sucursali");
                                return new Symbol(Simbolos.sucursali, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 62: 
          { System.out.println("Reconocido: <<"+yytext()+">>,apellidof");
                                return new Symbol(Simbolos.apellidof, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 32: 
          { System.out.println("Reconocido: <<"+yytext()+">>, colori");
                                return new Symbol(Simbolos.colori, yycolumn, yyline, yytext());
          }
        case 120: break;
        case 55: 
          { System.out.println("Reconocido: <<"+yytext()+">>,apellidoi");
                                return new Symbol(Simbolos.apellidoi, yycolumn, yyline, yytext());
          }
        case 121: break;
        case 24: 
          { System.out.println("Reconocido: <<"+yytext()+">>,idi");
                                return new Symbol(Simbolos.idi, yycolumn, yyline, yytext());
          }
        case 122: break;
        case 42: 
          { System.out.println("Reconocido: <<"+yytext()+">>,sucur");
                                return new Symbol(Simbolos.sucur, yycolumn, yyline, yytext());
          }
        case 123: break;
        case 19: 
          { System.out.println("Reconocido: <<"+yytext()+">>, tstring ");
                                return new Symbol(Simbolos.tstring, yycolumn, yyline,new String( yytext()));
          }
        case 124: break;
        case 33: 
          { System.out.println("Reconocido: <<"+yytext()+">>,marcai");
                                return new Symbol(Simbolos.marcai, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 46: 
          { System.out.println("Reconocido: <<"+yytext()+">>,tiendaf");
                                return new Symbol(Simbolos.tiendaf, yycolumn, yyline, yytext());
          }
        case 126: break;
        case 43: 
          { System.out.println("Reconocido: <<"+yytext()+">>,tel");
                                return new Symbol(Simbolos.tel, yycolumn, yyline, yytext());
          }
        case 127: break;
        case 12: 
          { System.out.println("Reconocido: <<"+yytext()+">>,igual");
                            return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
          }
        case 128: break;
        case 64: 
          { System.out.println("Reconocido: <<"+yytext()+">>, idc ");
                                return new Symbol(Simbolos.idc, yycolumn, yyline, new String (yytext()));
          }
        case 129: break;
        case 70: 
          { System.out.println("Reconocido: <<"+yytext()+">>,usuarioi");
                                return new Symbol(Simbolos.usuarioi, yycolumn, yyline, yytext());
          }
        case 130: break;
        case 56: 
          { System.out.println("Reconocido: <<"+yytext()+">>, pro");
                                return new Symbol(Simbolos.pro, yycolumn, yyline, yytext());
          }
        case 131: break;
        case 39: 
          { System.out.println("Reconocido: <<"+yytext()+">>,correof");
                                return new Symbol(Simbolos.correof, yycolumn, yyline, yytext());
          }
        case 132: break;
        case 28: 
          { System.out.println("Reconocido: <<"+yytext()+">>, cod");
                                return new Symbol(Simbolos.cod, yycolumn, yyline, yytext());
          }
        case 133: break;
        case 40: 
          { System.out.println("Reconocido: <<"+yytext()+">>,tamanoi");
                                return new Symbol(Simbolos.tamanoi, yycolumn, yyline, yytext());
          }
        case 134: break;
        case 13: 
          { System.out.println("Reconocido: <<"+yytext()+">>, apar");
                            return new Symbol(Simbolos.apar, yycolumn, yyline, yytext());
          }
        case 135: break;
        case 37: 
          { System.out.println("Reconocido: <<"+yytext()+">>, colorf");
                                return new Symbol(Simbolos.colorf, yycolumn, yyline, yytext());
          }
        case 136: break;
        case 41: 
          { System.out.println("Reconocido: <<"+yytext()+">>,nombrei");
                                return new Symbol(Simbolos.nombrei, yycolumn, yyline, yytext());
          }
        case 137: break;
        case 49: 
          { System.out.println("Reconocido: <<"+yytext()+">>, dir");
                                return new Symbol(Simbolos.dir, yycolumn, yyline, yytext());
          }
        case 138: break;
        case 57: 
          { System.out.println("Reconocido: <<"+yytext()+">>,cantidadf");
                                return new Symbol(Simbolos.cantidadf, yycolumn, yyline, yytext());
          }
        case 139: break;
        case 25: 
          { System.out.println("Reconocido: <<"+yytext()+">>, tip");
                                return new Symbol(Simbolos.tip, yycolumn, yyline, yytext());
          }
        case 140: break;
        case 38: 
          { System.out.println("Reconocido: <<"+yytext()+">>,marcaf");
                                return new Symbol(Simbolos.marcaf, yycolumn, yyline, yytext());
          }
        case 141: break;
        case 15: 
          { 
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
